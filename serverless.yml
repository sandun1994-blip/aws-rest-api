service: notes
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1

functions:
  authorizer:
    handler: authorizer.handler
    environment:
       COGNITO_USERPOOL_ID: !Ref cognitoUserPool
       COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolwebclient

  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt NotesTable.Arn
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer
  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt NotesTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer
  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt NotesTable.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer
  getNote:
    handler: handler.getNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt NotesTable.Arn
    events:
      - http:
          method: get
          path: notes
          authorizer: 
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoUserPool.Arn


            # arn: ${ssm:/notes/dev/userPoolId}

          #   arn: arn:aws:cognito-idp:us-east-1:863572446124:userpool/us-east-1_X6u6GhqYn

plugins:
  - serverless-iam-roles-per-function

# you can add CloudFormation resource templates here
resources:
  Resources: ${file(resources.yml)}
# 55

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

